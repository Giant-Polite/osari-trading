import pkg from 'fs-extra';
const { writeFileSync, existsSync, readdirSync } = pkg;
import { create } from 'xmlbuilder2';
import { createClient } from '@supabase/supabase-js';
import { join } from 'path';

async function generateSitemap() {
  const baseUrl = 'https://osari-trading.com';
  const supabase = createClient(
    process.env.VITE_SUPABASE_URL ?? '',
    process.env.VITE_SUPABASE_ANON_KEY ?? ''
  );

  // Static pages from src/pages/
  const staticPages = [
    { url: '/', changefreq: 'weekly', priority: 1.0 },
    { url: '/about', changefreq: 'monthly', priority: 0.8 },
    { url: '/contact', changefreq: 'monthly', priority: 0.8 },
    { url: '/products', changefreq: 'weekly', priority: 0.9 },
  ];

  // Fetch products from Supabase
  let dynamicPages = [];
  try {
    const { data: products } = await supabase.from('products').select('slug, updated_at');
    dynamicPages = products.map(product => ({
      url: `/products/${product.slug}`,
      changefreq: 'weekly',
      priority: 0.9,
      lastmod: product.updated_at || new Date().toISOString(),
    }));
  } catch (error) {
    console.error('Supabase fetch failed:', error);
  }

  // Fallback: Generate product pages from image directories
  const imageDirs = [
    'spices-seasonings',
    'tea',
    'pocas-products',
    'OKF',
    'cooking-essential-oils',
    'dates',
    'drink-desserts',
    'grains-sides',
    'sauces-dips',
  ];

  const fileBasedProducts = imageDirs.flatMap(dir => {
    const dirPath = join('public', 'images', dir);
    if (!existsSync(dirPath)) {
      console.warn(`Directory does not exist: ${dirPath}`);
      return [];
    }
    return readdirSync(dirPath)
      .filter(file => file.endsWith('.webp') || file.endsWith('.jpeg'))
      .map(file => ({
        url: `/products/${file.replace(/\.webp|\.jpeg/, '').toLowerCase().replace(/[^a-z0-9]+/g, '-')}`,
        changefreq: 'weekly',
        priority: 0.9,
        lastmod: new Date().toISOString(),
      }));
  });

  // Combine static and dynamic pages, removing duplicates
  const pages = [...staticPages, ...dynamicPages, ...fileBasedProducts].filter(
    (page, index, self) => index === self.findIndex(p => p.url === page.url)
  );

  const xml = create({ version: '1.0', encoding: 'UTF-8' })
    .ele('urlset', { xmlns: 'http://www.sitemaps.org/schemas/sitemap/0.9' })
    .com('Generated by Osari Trading')
    .dtd();

  pages.forEach(page => {
    xml.ele('url')
      .ele('loc').txt(`${baseUrl}${page.url}`).up()
      .ele('lastmod').txt(page.lastmod || new Date().toISOString()).up()
      .ele('changefreq').txt(page.changefreq).up()
      .ele('priority').txt(page.priority).up();
  });

  const sitemap = xml.end({ prettyPrint: true });
  writeFileSync('public/sitemap.xml', sitemap); // Ensure this path is correct
  console.log('Sitemap generated at public/sitemap.xml');
}

generateSitemap().catch(console.error);